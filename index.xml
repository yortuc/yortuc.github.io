<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yortuc</title>
    <link>http://yortuc.com/index.xml</link>
    <description>Recent content on yortuc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 May 2017 07:35:38 +0300</lastBuildDate>
    <atom:link href="http://yortuc.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Udacity self driving car engineer nanodegree Term-1</title>
      <link>http://yortuc.com/post/udacity-sdcend-deadlines/</link>
      <pubDate>Fri, 19 May 2017 07:35:38 +0300</pubDate>
      
      <guid>http://yortuc.com/post/udacity-sdcend-deadlines/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve involved in Udacity&amp;rsquo;s Self diring car nanodegree May cohort.
Here are the recommended due dates for term1 projects.
I&amp;rsquo;m very exiceted and can&amp;rsquo;t wait to study on them.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Project&lt;/th&gt;
&lt;th&gt;Due&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Finding Lane Lines&lt;/td&gt;
&lt;td&gt;June 1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Traffic Sign Classification&lt;/td&gt;
&lt;td&gt;July 3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Behavioral Cloning&lt;/td&gt;
&lt;td&gt;July 24&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Advanced Lane Finding&lt;/td&gt;
&lt;td&gt;August 7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Vehicle Tracking&lt;/td&gt;
&lt;td&gt;August 21&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;End of Term 1&lt;/td&gt;
&lt;td&gt;September 4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://yortuc.com/post/about/</link>
      <pubDate>Mon, 16 Jan 2017 16:11:58 +0530</pubDate>
      
      <guid>http://yortuc.com/post/about/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Studied Aerospace Engineering, Computational Aerodynamics&lt;/li&gt;
&lt;li&gt;Worked in defense industry for three years in R&amp;amp;D&lt;/li&gt;
&lt;li&gt;Developing web/mobile apps for more than ten years&lt;/li&gt;
&lt;li&gt;Interested in AI, Deep Learning, Computer Vision, Self-driving cars&lt;/li&gt;
&lt;li&gt;Enjoys writing code, composing music, reading&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Developing a sokoban clone with React and Redux</title>
      <link>http://yortuc.com/post/developing-a-sokoban-clone-with-redux-and-react/</link>
      <pubDate>Thu, 03 Sep 2015 16:11:58 +0530</pubDate>
      
      <guid>http://yortuc.com/post/developing-a-sokoban-clone-with-redux-and-react/</guid>
      <description>

&lt;iframe style=&#34;border:none; border-bottom:1px solid #ccc&#34; src=&#34;http://yortuc.com/sokoban/index.html&#34;  width=&#34;100%&#34; height=&#34;540&#34;&gt;&lt;/iframe&gt; 

&lt;p&gt;Please click on the map to play. Use w-a-s-d keys to move. Push green boxes on the yellow tiles. (&lt;a href=&#34;http://yortuc.github.io/sokoban/&#34; target=&#34;_blank&#34;&gt;play here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You can get the full source here : &lt;a href=&#34;https://github.com/yortuc/ReduxSokoban&#34;&gt;https://github.com/yortuc/ReduxSokoban&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sokoban is an ancient video game if you haven&amp;rsquo;t heard it yet.&lt;br /&gt;
(&lt;a href=&#34;https://en.wikipedia.org/wiki/Sokoban&#34;&gt;https://en.wikipedia.org/wiki/Sokoban&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&#34;why&#34;&gt;Why?&lt;/h3&gt;

&lt;p&gt;This project is consist of my experiments on the technologies i&amp;rsquo;ve been playing around for a while. And i thought, it might be a useful example to see the big picture of how an ideal application architecture would be.&lt;/p&gt;

&lt;p&gt;This project covers,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UI should be rendered (on DOM or wherever) as a pure reflection of application state. Application state should be the only source of truth.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A game can be programmed in a declarative fashion leveraging powerful React component model. This approach would be more sufficient for games which have a wide range of intractable game objects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the whole application state is a single tree-structured object, it can be serialised, saved and restored easily. So, we&amp;rsquo;ll have an undo-redo mechanism and ability to save and continue the game later from the exact point where we left.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Image shows the project architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yortuc.com/images/concept.png&#34; alt=&#34;react redux app structure&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-ui-as-a-reflection-of-application-state&#34;&gt;1. UI as a reflection of application state&lt;/h3&gt;

&lt;p&gt;Our tiny application here, represents its humble UI, the game, as a drawing on a Canvas element. We don&amp;rsquo;t need DOM nodes like most of the other web applications. So, main rendering context is the Canvas element. This is one of the biggest advantages of the React. Separation of rendering logic and rendering context. You can reflect the application state on browser as DOM nodes, on canvas element as drawings, on platforms such as iOS or Android as native components and so on.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;tr&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The virtual dom is an implementation detail of React.js. React Native demonstrates that many rendering contexts are possible.&lt;/p&gt;&amp;mdash; Bill Fisher (@fisherwebdev) &lt;a href=&#34;https://twitter.com/fisherwebdev/status/560504428613337088&#34;&gt;28 Ocak 2015&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;In the latest release of React (v0.14, &lt;a href=&#34;https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html&#34;&gt;https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html&lt;/a&gt;), DOM context is separated from core React library. This encourages development of universal (not DOM dependent) component development and makes it easier to share functionality between React-DOM and React-Native platforms.&lt;/p&gt;

&lt;p&gt;We are going to render our components mostly on the Canvas element, not on the browser DOM. And also, if rendering mechanism is a pure function which takes the application state and then outputs the UI, switching from one rendering context to another will not break any other parts of the application. For instance, rendering game objects on the DOM instead of canvas as html elements, is fairly simple and won&amp;rsquo;t require any change on any other part other than the red hexagon on the illustration above.&lt;/p&gt;

&lt;h3 id=&#34;2-declarative-scene-creation&#34;&gt;2. Declarative scene creation&lt;/h3&gt;

&lt;p&gt;At the beginning, i was planning to create a mario-like 2d side scroller. But the timing issues made the case over-complicated for me (challenge noted btw). So, i decided to implement a less dynamic game which renders only after a user input. React driven declarative component model served well in this case, imho.&lt;/p&gt;

&lt;p&gt;Whole game is composed with React components representing game objects. Since Sokoban has quite simple hierarchy, a more complex game which has layers, levels, different kinds of game objects can benefit more from this approach.&lt;/p&gt;

&lt;p&gt;Component structure goes this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;GameContainer store={reduxSokobanStore}&amp;gt;
  &amp;lt;SokobanGame&amp;gt;
     &amp;lt;Game&amp;gt;
         {[...gameObjects]}
     &amp;lt;/Game&amp;gt;
  &amp;lt;/SokobanGame&amp;gt;
&amp;lt;/GameContainer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Starting with &amp;ldquo;Game&amp;rdquo; component, the inner part of the hierarchy is project agnostic humble game engine layer. These components are re-usable and can be used in another game development. In this project, we have only one rendering context, 2d drawing context of the Canvas element. For a more complex game, leveraging the React component model, local contexts can be created to render on achieving double buffering for a better performance.&lt;/p&gt;

&lt;p&gt;SokobanGame is the problem-specific, ad-hoc component composed of standard game-engine components. Also has the logic to parse application state and create game objects needed.&lt;/p&gt;

&lt;p&gt;Outermost component, GameContainer, is controlled by Redux to inject application state into inner elements as props. With this approach, only GameContainer component is aware of Redux. The rest doesn&amp;rsquo;t care where the props are coming from.&lt;/p&gt;

&lt;h4 id=&#34;i-create-rendering-context&#34;&gt;I. Create rendering context&lt;/h4&gt;

&lt;p&gt;&amp;ldquo;Game&amp;rdquo; component will create an html Canvas element and then create the main rendering context on it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;render() { 
    this.state.ctx &amp;amp;&amp;amp; this.state.ctx.clearRect(0, 0, 640, 480);
        
    return (
       &amp;lt;canvas id=&amp;quot;game&amp;quot; width=&amp;quot;900&amp;quot; height=&amp;quot;600&amp;quot;&amp;gt;
          { this.state.ctx ? this.mapChildren() : []}
       &amp;lt;/canvas&amp;gt;
    )
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we don&amp;rsquo;t have the canvas element at the beginning (in the first render method call), we should create the rendering context after the canvas element has been rendered.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;componentDidMount() {
    var c = document.getElementById(&amp;quot;game&amp;quot;);
    var ctx = c.getContext(&amp;quot;2d&amp;quot;);

    this.setState({ ctx: ctx });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;ii-inject-main-rendering-context-into-child-components&#34;&gt;II. Inject main rendering context into child components&lt;/h4&gt;

&lt;p&gt;We created the rendering context which all the child components will render themselves on. But, child components are not aware of the context, yet.&lt;/p&gt;

&lt;p&gt;To pass rendering context to the child components, React&amp;rsquo;s context structure would be the best practice here. Since we don&amp;rsquo;t have a deep cascading game component structure here i don&amp;rsquo;t want to make things more complicated. And i&amp;rsquo;ll go with a simple manual injection.&lt;/p&gt;

&lt;p&gt;In the render method of the &amp;ldquo;Game&amp;rdquo; component, inject the rendering context to its children.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mapChildren () {
    return React.Children.map(this.props.children, function (child) {
        return React.addons.cloneWithProps(child, {
            ctx: this.state.ctx 
        });
    }.bind(this));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the render method of Game component&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;render() { 
    this.state.ctx &amp;amp;&amp;amp; this.state.ctx.clearRect(0, 0, 640, 480);
        
    return (
        &amp;lt;canvas id=&amp;quot;game&amp;quot; width=&amp;quot;900&amp;quot; height=&amp;quot;600&amp;quot;&amp;gt;
            { this.state.ctx ? this.mapChildren() : []}
        &amp;lt;/canvas&amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;iii-render-game-objects&#34;&gt;III. Render game objects&lt;/h4&gt;

&lt;p&gt;Now, child game objects can render themselves on the main rendering context. Take rectangle component for instance. It has properties such as position, size and color. And it renders itself depending on these properties.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;render() { 
    var ctx = this.props.ctx;
    ctx.fillStyle= this.props.color;
    ctx.fillRect(this.props.x,this.props.y, this.props.width, this.props.height);
    return null;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And yes, we return null, we have nothing to do with DOM.&lt;/p&gt;

&lt;h4 id=&#34;iv-declare-game-scene&#34;&gt;IV. Declare game scene&lt;/h4&gt;

&lt;p&gt;We have game-agnostic tools to render game components. Next step is to implement specific Sokoban game. We need a data structure to describe application state at ant given time t. Application state will store Sokobal level map, positions of game objects such as walls, boxes and position of player.&lt;/p&gt;

&lt;p&gt;The simplest method i can think of to represent a level map like this is to use string literals. I&amp;rsquo;ll define the map (app state) in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const initialState = {
	level: `1,1,1,1,1,1,1,1,1
	        1,0,0,0,0,0,0,0,1
	        1,0,0,0,3,0,0,0,1
	        1,0,0,0,1,0,0,0,1
	        1,0,0,1,1,1,2,0,1
	        1,0,2,0,1,0,0,0,1
	        1,0,0,0,3,0,0,0,1
	        1,0,0,0,0,0,0,0,1
	        1,1,1,1,1,1,1,1,1`,
	playerX: 1,
	playerY: 6
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you guessed, numbers represent tile type.
&lt;em&gt;0: walkable area, 1: wall, 2: box, 3: box placement place.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll parse this string literal and create game components depending on the type and its position in the string which maps to x and y coordinates on the screen.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;createMap(txtLevel) {
   var level = txtLevel.replace(/\,/gi, &#39;&#39;).split(&#39;\n&#39;).map(s=&amp;gt; {
      return s.replace(/\s/gi, &#39;&#39;)
   });

   var tiles = [];
   var bgcolor = [&amp;quot;#fff&amp;quot;, &amp;quot;#e5e5e5&amp;quot;];
   var colors = [null, &amp;quot;black&amp;quot;, &amp;quot;green&amp;quot;, &amp;quot;yellow&amp;quot;, &amp;quot;blue&amp;quot;];
   var ind = 0;
   var color, row;

   for(var i=0; i&amp;lt;level.length; i++){
      row = level[i];

      for(var j=0; j&amp;lt;row.length; j++){
         color = row[j] === &amp;quot;0&amp;quot; ? bgcolor[(i+j)%2] : colors[row[j]];

         tiles.push(
            &amp;lt;Rect key={++ind} x={j*50} y={i*50} color={color} /&amp;gt;
         );
      } 
   }

   return tiles;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, this is not the cutest parser, but works for now. We parsed the level map and created tile components accordingly.&lt;/p&gt;

&lt;p&gt;And finally we can render our map on the canvas, with React.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yortuc.com/images/sokoban_redux.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-redux-as-a-state-manager&#34;&gt;3. Redux as a state manager&lt;/h3&gt;

&lt;p&gt;Next step is to react to user input. When user interacts with application, this &amp;ldquo;changes&amp;rdquo; the application state. Using Redux, a new &amp;ldquo;action&amp;rdquo; is emitted on every user interaction. And then Redux runs the reducer function which returns a new application state depending on the previous state and received action.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(previousState, action) =&amp;gt; newState
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reducer should be a pure function with no side-effects. This means, for the same inputs, always the same application state is created. This determinism makes it easier to debug your application, and trace the bug to the source.&lt;/p&gt;

&lt;p&gt;In the application we have 2 kinds of user interaction. Moving player and traversing in the application state history via undo and redo buttons. Redux has actions to cary messages between state container and the entity which emits the action. Actions are plain javascript objects which have to have &amp;ldquo;type&amp;rdquo; property.&lt;/p&gt;

&lt;p&gt;For instance, keyboard event handlers emit action named &amp;ldquo;PLAYER___MOVE_REQUEST&amp;rdquo;. This action also has the information required to move the player such as delta directions on x and y axises. The action has &amp;ldquo;request&amp;rdquo; in the name because every user movement is not valid. Player cant go through walls and any request that tries to go through walls aren&amp;rsquo;t going to change application state.&lt;/p&gt;

&lt;p&gt;Our simple player move-request action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// player action
{ 
   type: &#39;PLAYER_MOVE_REQUEST&#39;, 
   dm: {   
      dx: 1,  // delta movement on x-axis
      dy: 0   // delta movement on y-axis
   } 
}

// dispatched in the keyboard event handler
// a move request for one tile left in x-direction
store.dispatch({ type: &#39;PLAYER_MOVE_REQUEST&#39;, dm: {dx: -1} });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the move-request action is emitted, main reducer function gets called by store.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// main reducer function
function reactSokoban (state, action) {

	switch(action.type) {
	case &#39;UNDO&#39;: 
		return appStates.length&amp;gt;1 ? appStates[--stateIndex] :
                                              appStates[stateIndex];
		break;

	case &#39;PLAYER_MOVE_REQUEST&#39;:
		var nextState = tryToMove(state, action.dm);

		if(nextState !== state){
			pushState(nextState);
		}

		return nextState;
		break;

	default: 
		return state;
	}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We check the incoming action&amp;rsquo;s type manually and act accordingly. If action type is PLAYER___MOVE_REQUEST, a new application state is created by a sub-reducer function, &lt;em&gt;tryToMove(state, movement)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A check has to be made in the tryToMove function if the requested movement is valid depending on the current game scene and movement.&lt;/p&gt;

&lt;p&gt;Since the level map is stored in a string template, we&amp;rsquo;ll create an array representation out of it to make computations easier.&lt;/p&gt;

&lt;p&gt;The vital point here is not to mutate state. All of the operations made here are immutable. Some immutable operations might be cumbersome to do manually. Using an immutable library such as Immutable.js (again from Facebook) and Freezer.js (a lightweight alternative) would be helpful here. And again, for the sake of simplicity i&amp;rsquo;ll do the immutable operations manually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function tryToMove(state, dm){
   /*
      return new state if user action is valid
   */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With previous state and action to be taken, we create the next application state. Or, maybe the move-request is invalid, user is tying to go through a wall so to speak, then reducer function returns the previous state.&lt;/p&gt;

&lt;h3 id=&#34;4-state-history-and-undo-mechanism&#34;&gt;4. State history and undo mechanism&lt;/h3&gt;

&lt;p&gt;After user requested a new player movement, if the movement is valid a different state object is created. Since these are pure objects, we can check if the new state is different then previous one just with default equal operator.&lt;/p&gt;

&lt;p&gt;In the main reducer function, for the move-request action,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case &#39;PLAYER_MOVE_REQUEST&#39;:
   var nextState = tryToMove(state, action.dm);

   if(nextState !== state){
      pushState(nextState);
   }
	
   return nextState;
   break;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can store this states in an array and traverse with an history index. pushState function does that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function pushState(state){
   appStates = appStates.splice(0, stateIndex+1);
   appStates.push(state);
   stateIndex++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we can render any application state without performance issues, going back and forth in state history is quite simple, almost for free.&lt;/p&gt;

&lt;p&gt;Undo mechanism is inside the main reducer as a single line of code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch(action.type) {
   case &#39;UNDO&#39;: 
      return stateIndex&amp;gt;0 ? appStates[--stateIndex] : appStates[stateIndex];
   break;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another approach to have undo-redo mechanism is to store not the states but the actions. Since actions are far more smaller objects than whole state, this would be more memory efficient. An action can be undone with applying movement in the opposite direction. And all user actions can be stored in an array, saved and replayed later.&lt;/p&gt;

&lt;h4 id=&#34;result&#34;&gt;Result&lt;/h4&gt;

&lt;p&gt;Increasing complexity of web applications is the main problem of the application  development today. With React, finally, we can program the user interface as a pure function. Only then handling the application state with immutable data structures becomes a valid option. And once we have immutable application state, taming the complex state beast becomes way simpler.&lt;/p&gt;

&lt;p&gt;And &amp;ldquo;simpler&amp;rdquo; means less errors, more comfortable debugging, more amusing development and happier developers. Happy coding!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Neden React?</title>
      <link>http://yortuc.com/post/neden-react-js/</link>
      <pubDate>Wed, 08 Apr 2015 16:11:58 +0530</pubDate>
      
      <guid>http://yortuc.com/post/neden-react-js/</guid>
      <description>

&lt;p&gt;Hızlı cevap: &lt;code&gt;uygulama state&lt;/code&gt;&amp;lsquo;ini yönetebilmek için.&lt;/p&gt;

&lt;h4 id=&#34;neyimiz-eksik&#34;&gt;Neyimiz Eksik ?&lt;/h4&gt;

&lt;p&gt;Modern web ugulamaları için uygulama state&amp;rsquo;lerini yönetmek ve uygulamanın bunlara cevap vermesini sağlamak gittikçe daha da zor bir hale geliyor.&lt;/p&gt;

&lt;p&gt;Bugüne kadar bu sorunu büyük ölçüde istemci taraflı MVC (ya da benzer MVVM, MV-whatever) yapıları ile çözmeye çalıştık. (Knockout, Angular, Backbone &amp;hellip;)&lt;/p&gt;

&lt;p&gt;Geldiğimiz nokta şu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yortuc.com/images/flux-react-mvc.png&#34; alt=&#34;mvc yapısı&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bir yerden sonra kim neyi güncelliyor ipin ucunu kaçırmak işten bile değil. Çünkü; uygulama state&amp;rsquo;lerinden her birinin değişip değişmediğini ve değiştiğinde uygulamanın ne yapması gerektiğini tek tek bizim söylememiz gerekiyor. Ayrıca uygulama state&amp;rsquo;lerinin birbirlerini güncellemesi ve kısır döngüler oluşturması da mümkün.&lt;/p&gt;

&lt;p&gt;Bu güne kadarki uygulamamız nasıldı? State&amp;rsquo;deki değişimleri tespit etmeye çalışıp sadece o state&amp;rsquo;in etkilediği UI bölgelerini güncellemeye çalışmak. Böyle yaptık çünkü DOM manüplasyonu maliyetli bir işti ve mümkün olduğunca az güncelleme yapmamız gerekiyordu.&lt;/p&gt;

&lt;p&gt;Durum böyle olunca, karmaşık state barındıran uygulamalarda UI&amp;rsquo;ı ve state&amp;rsquo;i senkronize tutabilmek başlı başına bir problem haline geldi.&lt;/p&gt;

&lt;p&gt;Teorik olarak en büyük sorun buydu, state değişimlerine ayak uydurmak. Ancak bunu çözerken izlediğimiz yollar da bize performans kayıpları getiriyordu. Observable yapılar ile sadece değişen state&amp;rsquo;in etkilediği UI bölgelerini otomatik olarak güncellemek başta mantıklı gelse de ölçeklenebilir bir yaklaşım olmadığı ortadaydı (Knockout). Örneğin sayfada yirmi tane Observable bölge varsa bunları tek tek güncellemek ciddi performans kaybı demektir. Angular&amp;rsquo;ın dirty checking yaklaşımı göreceli olarak performanslı olsa da gerekli gereksiz her yerde state değişikliklerini yine de biz izlemek durumundaydık.&lt;/p&gt;

&lt;h2 id=&#34;react-ne-vaadediyor&#34;&gt;React Ne Vaadediyor?&lt;/h2&gt;

&lt;p&gt;Sorunumuz bu. State değişikliklerini tespit etmekte ve UI&amp;rsquo;ı bu state&amp;rsquo;i temsil edecek şekilde senkron etmekte zorlanıyoruz. &lt;strong&gt;React diyor ki, state değişikliklerini tespit etme!&lt;/strong&gt; Uygulama state&amp;rsquo;inde en ufak bir değişimde tüm UI&amp;rsquo;ı tekrar oluştur. Neyin değişip neyin değişmediğiyle ilgilenme.&lt;/p&gt;

&lt;p&gt;Ne kadar performanslı değil mi? Biz daha önce sadece kısmi güncellemeler yaparken performans sorunları yaşarken, şimdi uygulama state&amp;rsquo;i içerisinde en ufak bir değişimde tüm UI&amp;rsquo;ı tekrar oluşturacağız.&lt;/p&gt;

&lt;p&gt;Bu yaklaşım aslında tanıdık. Sunucu taraflı UI rendering&amp;rsquo;i tam da böyle yapıyoruz. Bu açıdan state değişimleri uygulamada karmaşaya yol açmıyor. Peki bu yaklaşımı client tarafında uygulamayı daha önce niye hiç düşünmedik? Çünkü DOM manipülasyonu zaten çok maliyetli iken tüm UI&amp;rsquo;ı tekrar oluşturmak mantıklı değildi, tabi eğer UI rendering işlemini direk olarak DOM üzerine yapıyorsanız!&lt;/p&gt;

&lt;h4 id=&#34;pür-fonksiyon-şeklinde-ui&#34;&gt;Pür fonksiyon şeklinde UI&lt;/h4&gt;

&lt;p&gt;React&amp;rsquo;in getirdiği aslında en radikal yaklaşım burada. React, her seferinde tüm UI baştan render ediyor evet, ama direk olarak DOM üzerine değil. Browser hafızasında yaşayan sanal bir DOM üzerine tüm UI&amp;rsquo;ı render ediyor. Daha sonra bu sanal DOM, state değişmeden bir önceki sanal DOM ile karşılaştırılıyor. Aradaki farkı yaratacak minimum gerçek DOM manipülasyonları hesaplanıyor. Daha sonra React gerçek browser DOM&amp;rsquo;unu bu minimum operasyonlar ile enaz maliyetle bir kerede güncelliyor. Muazzam bir soyutlama katmanı (Layer of abstraction, &lt;a href=&#34;http://en.wikipedia.org/wiki/Abstraction_layer&#34;&gt;http://en.wikipedia.org/wiki/Abstraction_layer&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Web uygulaması geliştiren programcı olarak biz, state değişimlerinin tespiti ve bu değişimlere nasıl tepki verilmesi gerektiği gibi konularda kafa yormamış oluyoruz, sadece tüm uygulamayı yeni state&amp;rsquo;i temsile edecek şekilde baştan render ediyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yortuc.com/images/f_ui.png&#34; alt=&#34;Pür fonksiyon şeklinde UI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bu sayede tüm UI bir pür fonksiyon (pure function, &lt;a href=&#34;http://en.wikipedia.org/wiki/Pure_function&#34;&gt;http://en.wikipedia.org/wiki/Pure_function&lt;/a&gt;) şeklini alıyor. Yani verilen bir stete için her zaman aynı çıktıyı üretiyor.&lt;/p&gt;

&lt;p&gt;Bu yaklaşım tabi ki ideal olanı. Uygulama bileşenlerini birer pür fonksiyon şeklinde yapılandırmak programcıya düşüyor, React&amp;rsquo;ın bir zorlayıcılığı yok. Gerçek hayat şartlarında tüm uygulama bileşenlerini pür olarak yapılandırmak da gerçekçi değil, özellikle kullanıcı müdahalesi olan kısımlarda.&lt;/p&gt;

&lt;p&gt;Şunu da belirtmem gerekir ki, burada bahsettiğm yaklaşım &amp;ldquo;ideal&amp;rdquo; React uygulamaları için geçerli. Mevcut mvc yapısı olan bir uygulamaya React&amp;rsquo;i entegre etmek de mümkün. Örneğin yüksek DOM performansı gerektiren view bölgelerinde Angular&amp;rsquo;in view katmanı olarak React&amp;rsquo;in kullanıldığı görülmekte.&lt;/p&gt;

&lt;h4 id=&#34;performans&#34;&gt;Performans&lt;/h4&gt;

&lt;p&gt;İlk olarak DOM güncellemede React&amp;rsquo;in nasıl bir performans artışı getirdiğini gördük. Buna ek olarak, React&amp;rsquo;in tüm UI&amp;rsquo;ı tekrar render etme yaklaşımı beraberinde ölçeklenebiliriği de getiriyor. Yani on güncelleme yapmak ile yirmi güncelleme yapmak arasında üstel bir maliyet farkı bulunmuyor, doğrusal bir rendering süresi artışı sözkonusu.&lt;/p&gt;

&lt;p&gt;Sadece iki görev üstlenen React&amp;rsquo;in ikinci görevi ise browser event&amp;rsquo;lerine cevap vermektir. Bu noktada da güzel bir yaklaşım sergilemişler ve sentetik event&amp;rsquo;ler oluşturmuşlar. React nesneleri üzerinde oluşan event&amp;rsquo;ler aslında gerçek browser event&amp;rsquo;leri değil. React sayfa çapında tek bir event delegasyonu ile tüm olan olayları yakalayıp ilgili nesnelere bu olayları uyarı olarak gönderiyor.&lt;/p&gt;

&lt;p&gt;DOM manipülasyonundan sonra web uygulaması performansını düşüren bir diğer unsur event listener&amp;rsquo;lardır. Ne kadar fazla DOM node&amp;rsquo;u event-listener&amp;rsquo;e sahipse browser üzerinde o kadar yük oluşur. React&amp;rsquo;in yaklaşımı sayesinde tüm uygulama sadece bir tane event-listener ile idare edilmiş oluyor. Ve yine buna ek olarak, oluşan event&amp;rsquo;leri React sentetik olarak üretip dispatch ettiği için cross-browser bir hale getirerek bunu yapabiliyor. Uygulamayı hangi browser üzerinde çalıştırdığınızdan bağımsız olarak bir event oluştuğunda elinize düşen event nesnesi standardize edilmiş bir yapıda oluyor.&lt;/p&gt;

&lt;h4 id=&#34;izomorfizm&#34;&gt;Izomorfizm&lt;/h4&gt;

&lt;p&gt;Tüm UI&amp;rsquo;ı sanal bir biçimde ifade ettiğimize göre, bu soyut ağaç yapısını istersek browser DOM node&amp;rsquo;larına dönüştürüp istemci tarafında UI&amp;rsquo;ı render edebiliriz ya da başka bir şekilde kullanabiliriz. Mesela sunucu tarafında html string&amp;rsquo;i oluşturup, aynı UI&amp;rsquo;ı sunucu tarafında oluşturabilir, istemciye önceden render edilmiş bir sayfa gösterebiliriz.&lt;/p&gt;

&lt;p&gt;Bunu yaklaşımı instagram şuan uyguluyor. Sayfada herhangi bir resme tıkladığınızda bu resim daha büyük olacak şekilde istemci tarafında render edilen bir UI üzerinde gösteriliyor. Bu state değişikliği URL&amp;rsquo;e de yansıyor. Bu URL&amp;rsquo;i alıp browser penceresine yapıştırdığınızda ise bu state sunucuda render edilmiş haliyle karşınıza geliyor. Sunucuda ve istemcide çalışabilen bir rendering yaklaşımı!&lt;/p&gt;

&lt;h4 id=&#34;sonuç&#34;&gt;Sonuç&lt;/h4&gt;

&lt;p&gt;Getirdiği yaklaşım ile React, bence web uygulamalarının geleceğidir. Sanal DOM ağacı ile oluşturulan soyutlama katmanı sayesinde uygulama bileşenlerini browser DOM&amp;rsquo;una render edilebilmekte, sunucuda html çıktısı üretebilmekte ve hatta native mobil uygulama arayüzleri oluşturulabilmekte. IOS için React Native henüz yeni yayınlandı (&lt;a href=&#34;http://facebook.github.io/react-native/&#34;&gt;http://facebook.github.io/react-native/&lt;/a&gt;). Sanıyorum yakında çok daha farklı kullanım alanları da görebileceğiz.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>